
# Other gitignore
.vscode
*.exe
bin
obj
.DS_Store
#https://github.com/github/gitignore
test
*.db
.env
*.pem
*.yml

#--Start Terraform gitignore from github repo :
# Local .terraform directories
**/.terraform/*
.terraform

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log
*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

#Version related file gets created with the command 'terraform init'
.terraform.lock.hcl

#--End Terraform gitignore from github repo :


#--Start AWS CLI gitignore from github repo : https://github.com/aws
*.py[co]
*.DS_Store

# Packages
*.egg
*.egg-info
dist
build
eggs
parts
var
sdist
develop-eggs
.installed.cfg

# Installer logs
pip-log.txt

# Unit test / coverage reports
.coverage
.tox
coverage.xml
nosetests.xml

#Translations
*.mo

#Mr Developer
.mr.developer.cfg

# Emacs backup files
*~

# Eclipse IDE
/.project
/.pydevproject

# IDEA IDE
.idea*
src/

# CLI docs generation
doc/source/aws_man_pages.json
doc/source/reference
doc/source/topic
doc/source/tutorial/services.rst

# Pyenv
.python-version

#--END AWS CLI gitignore from github repo : https://github.com/aws


## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore

*.tar
*.tar.*
*.jar
*.exe
*.msi
*.zip
*.tgz
*.log
*.log.*
*.sig

pkg/
src/


test
*.db
.env